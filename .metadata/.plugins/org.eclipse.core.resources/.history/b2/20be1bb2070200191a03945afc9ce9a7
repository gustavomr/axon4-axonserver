package com.giftcard.aggregates;

import org.axonframework.commandhandling.CommandHandler;
import org.axonframework.commandhandling.gateway.CommandGateway;
import org.axonframework.eventsourcing.EventSourcingHandler;
import org.axonframework.modelling.command.AggregateIdentifier;
import org.axonframework.spring.stereotype.Aggregate;
import org.springframework.beans.factory.annotation.Autowired;

import com.giftcard.command.IssueCmd;

import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

@Getter @Setter 
@ToString
@EqualsAndHashCode
@Aggregate
@NoArgsConstructor
public class GiftCard {

    @AggregateIdentifier
    private String id;
    private int remainingValue;
    
    @Autowired
    private CommandGateway commandGateway;

    @CommandHandler
    public IssueCmd GiftCard(IssueCmd cmd) {        
        if(cmd.getAmount() <= 0) throw new IllegalArgumentException("amount <= 0");
        //AggregateLifecycle.apply(new IssuedEvt(cmd.getId(), cmd.getAmount())); 
        IssueCmd command = new IssueCmd(cmd.getId(), cmd.getAmount());
        commandGateway.sendAndWait(command);
        return command;
    }

    @EventSourcingHandler
    public void on(IssueCmd evt) {
        id = evt.getId();
        this.remainingValue = evt.getAmount();
    }

   
}